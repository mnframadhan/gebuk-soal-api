generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Administrator {

  id String @id @unique
  username String @unique
  password String
  token String?

  @@map("administrators")
}

model Contributor {

  id String @id @unique
  username String @unique
  email String @unique
  password String
  contribution_points Int @default(0)
  n_soal Int @default(0)
  created_at String
  soals Soal[]
  CompletePackage CompletePackage[]
  token String?

  @@map("contributors")

}

model Student {

  id String @id @unique
  username String @unique
  full_name String?
  date_of_birth String?
  email String @unique
  password String
  bio String @default("")
  phone_number String?
  education_name String?
  major String? 
  education_description String?
  is_present_education Boolean? @default(false)
  start_year_education String?
  end_year_education String? 
  points Int @default(0)
  n_soal Int @default(0)
  cognitive_point Int @default(10)
  verbal_analogi Int @default(10)
  verbal_silogisme Int @default(10)
  verbal_analitik Int @default(10)
  numerik_deret_angka Int @default(10)
  numerik_perbandingan_kuantitatif Int @default(10)
  numerik_soal_cerita Int @default(10)
  numerik_berhitung Int @default(10)
  nasionalisme Int @default(10)
  bela_negara Int @default(10)
  pilar_negara Int @default(10)
  integritas Int @default(10)
  bahasa_negara Int @default(10)
  cpns_tiu_point Int @default(10)
  cpns_twk_point Int @default(10)
  cpns_tkp_point Int @default(10)
  quota Int? @default(5)
  created_at String // unix time
  token String?
  membership String @default("Basic")
  avatar String?
  premium_order_id String?
  premium_request String @default("None")
  premium_at String?
  works Work[]
  result Result[]
  order Order[]
  candidate Candidate? // one to one relationship
  verified Boolean @default(false)
  verification_code String?
  StudentCompletePackages StudentCompletePackage[]

  @@map("students")

}

model Company {
  id String @id @unique @default(uuid())
  brand_name String
  legal_name String
  email String @unique
  phone String
  address String
  password String
  sector String
  sub_sector String?
  n_employee String
  n_package Int @default(0)
  n_applicant Int @default(0)
  token String?
  created_at String
  banner_image String?
  PackageBundle PackageBundle[]
  PackageTestUnit PackageTestUnit[]
  status String? @default("Free")
  requested_to_update_at String?
  status_updated_at String?
  verified Boolean? @default(false)
  verification_code String?
  logo String?
  general_preferred_skills PreferredSkills[]
  Touch Touch[]

  @@map("companies")
}

model PreferredSkills {
	
	id Int @id @default(autoincrement())
	name String
	company_id String
	Company Company @relation(fields: [company_id], references: [id])
	
	@@map("preferredSkills")

}

model Touch {
	
	id String @id @default(uuid())
	company_id String
	Company Company @relation(fields: [company_id], references: [id])
	message String @db.LongText
	candidate_id String
	Candidate Candidate @relation(fields: [candidate_id], references: [id])
	created_at String

}

model PackageTestUnit {
  id String @id @unique @default(uuid())
  company_id String
  company Company @relation(fields: [company_id], references: [id])
  text String?
  text_image String?
  question String?
  option1 String?
  option1_point Int?
  option1_image String?
  option2 String?
  option2_point Int?
  option2_image String?
  option3 String?
  option3_point Int?
  option3_image String?
  option4 String?
  option4_point Int?
  option4_image String?
  option5 String?
  option5_point Int?
  option5_image String?
  unique_answer String?
  token String?
  created_at String
  package_bundle_id String
  packageBundle PackageBundle @relation(fields: [package_bundle_id], references: [id])
  packageTestWorks PackageTestWorks[]
  
  @@map("packageTestUnits")
  
}

model PackageBundle {

  id String @id @default(uuid())
  package_name String
  expired_date String
  created_at String
  n_unit Int?
  max_duration Int?
  token String?
  present_n_unit Int? @default(0)
  company_id String
  company Company @relation(fields: [company_id], references: [id])
  packageTestUnit PackageTestUnit[]
  packageBundle PackageTestWorks[]
  packageTestResult PackageTestResults[]

  @@map("packageBundles")

}

model CompletePackage {
	
	id String @id @default(uuid())
	category String
	package_name String
	expired_date String
	created_at String
	created_by String
	difficulty Int
	price Int?
	unique_selling_point1 String?
	unique_selling_point2 String?
	unique_selling_point3 String?
	n_unit Int
	Contributor Contributor @relation(fields: [created_by], references: [username])
	Soal Soal[]
	Separator Separator[]
	StudentCompletePackage StudentCompletePackage[]
	
	@@map("completePackages")
}

model StudentCompletePackage {

	id String @id @default(uuid())
	student_id String
	Student Student @relation(fields: [student_id], references: [id])
	complete_package_id String
	CompletePackage CompletePackage @relation(fields: [complete_package_id], references: [id])
	created_at String
	status String @default("Menunggu Pembayaran")
	validity Boolean @default(false)
	result Int?
	Work Work[]
	
	@@map("StudentCompletePackage")
}

model Separator {
	
	id String @id @default(uuid())
	complete_package_id String
	CompletePackage CompletePackage @relation(fields: [complete_package_id], references: [id])
	text String @db.LongText

	@@map("separators")
}

model Candidate {

  id String  @unique @default(uuid())
  id_number String @id
  student_id String @unique
  student Student @relation(fields: [student_id], references: [id])
  full_name String
  email String
  address String
  city String
  district String
  sub_district String
  postal_code String
  verified Boolean @default(false)
  verification_code String? 
  phone String
  created_at String
  packageTestResults PackageTestResults[]
  packageTestWorks PackageTestWorks[]
  Touch Touch[]
  
  @@map("candidates")

}

model PackageTestWorks {

  id String @id @default(uuid())
  text String?
  question String?
  selected_answer String
  start_time String?
  end_time String?
  candidate_id String
  Candidate Candidate @relation(fields: [candidate_id], references: [id])
  package_bundle_id String
  PackageBundle PackageBundle @relation(fields: [package_bundle_id], references: [id])
  package_test_unit_id String
  packageTestUnit PackageTestUnit @relation(fields: [package_test_unit_id], references: [id])

  @@map("packageTestUnitWorks")
}

model PackageTestResults {

  id String @id @default(uuid())
  candidate_id String
  total_records Int
  start_time String?
  end_time String?
  duration Int
  n_true Int
  n_false Int
  points Decimal
  package_bundle_id String
  packageBundle PackageBundle @relation(fields: [package_bundle_id], references: [id])
  Candidate Candidate @relation(fields: [candidate_id], references: [id])
 
  @@map("packageTestResults")
}

model Order {

  id String @id @unique
  student_id String?
  user Student? @relation(fields: [student_id], references: [id], onDelete: SetNull)
  qty Int @default(0)
  price Int @default(2000)
  discount Float @default(0)
  sub_total Int
  order_date String
  payment_date String?
  status String @default("Menunggu Pembayaran")

  @@map("orders")

}

enum Difficulty {
  Easy
  Medium
  Hard
}

model Soal {

  id String @id @unique
  category String
  sub_category String?
  cpns_category String?
  label String? 
  difficulty Difficulty
  text String @db.LongText
  question String
  option1 String? 
  option2 String?
  option3 String?
  option4 String?
  option5 String?
  option1_point Int?
  option2_point Int?
  option3_point Int?
  option4_point Int?
  option5_point Int?
  correct_answer String
  explanation String? @db.LongText
  explanation_url_youtube_video String?
  is_protected Boolean @default(false)
  complete_package_id String?
  orders Int?
  CompletePackage CompletePackage? @relation(fields: [complete_package_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  created_by String?
  contributor Contributor? @relation(fields: [created_by], references: [username], onDelete: SetNull, onUpdate: Cascade)
  created_at String
  Works Work[]

  @@map("soals")
  
}

model Work {

  id String @id @unique
  student_complete_package_id String?
  StudentCompletePackage StudentCompletePackage? @relation(fields: [student_complete_package_id], references: [id], onDelete: Cascade)
  username String
  students Student @relation(fields: [username], references: [username], onDelete: Cascade)
  soal_id String
  soal Soal @relation(fields: [soal_id], references: [id], onDelete: Cascade)
  answer String
  result Boolean
  created_at String

  @@map("works")

}

model Result {

  id String @id @unique
  username String
  students Student @relation(fields: [username], references: [username], onDelete: Cascade)
  today_works Int
  number_of_true Int
  number_of_false Int
  created_at String

  @@map("results")
  
}
